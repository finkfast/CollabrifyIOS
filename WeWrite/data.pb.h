// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace details {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class Event;

// ===================================================================

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required bool action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline bool action() const;
  inline void set_action(bool value);

  // optional string variable = 3;
  inline bool has_variable() const;
  inline void clear_variable();
  static const int kVariableFieldNumber = 3;
  inline const ::std::string& variable() const;
  inline void set_variable(const ::std::string& value);
  inline void set_variable(const char* value);
  inline void set_variable(const char* value, size_t size);
  inline ::std::string* mutable_variable();
  inline ::std::string* release_variable();
  inline void set_allocated_variable(::std::string* variable);

  // @@protoc_insertion_point(class_scope:details.Event)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_variable();
  inline void clear_has_variable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  bool action_;
  ::std::string* variable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// ===================================================================


// ===================================================================

// Event

// required int32 index = 1;
inline bool Event::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Event::index() const {
  return index_;
}
inline void Event::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required bool action = 2;
inline bool Event::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_action() {
  action_ = false;
  clear_has_action();
}
inline bool Event::action() const {
  return action_;
}
inline void Event::set_action(bool value) {
  set_has_action();
  action_ = value;
}

// optional string variable = 3;
inline bool Event::has_variable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_variable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_variable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_variable() {
  if (variable_ != &::google::protobuf::internal::kEmptyString) {
    variable_->clear();
  }
  clear_has_variable();
}
inline const ::std::string& Event::variable() const {
  return *variable_;
}
inline void Event::set_variable(const ::std::string& value) {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::kEmptyString) {
    variable_ = new ::std::string;
  }
  variable_->assign(value);
}
inline void Event::set_variable(const char* value) {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::kEmptyString) {
    variable_ = new ::std::string;
  }
  variable_->assign(value);
}
inline void Event::set_variable(const char* value, size_t size) {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::kEmptyString) {
    variable_ = new ::std::string;
  }
  variable_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_variable() {
  set_has_variable();
  if (variable_ == &::google::protobuf::internal::kEmptyString) {
    variable_ = new ::std::string;
  }
  return variable_;
}
inline ::std::string* Event::release_variable() {
  clear_has_variable();
  if (variable_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = variable_;
    variable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_variable(::std::string* variable) {
  if (variable_ != &::google::protobuf::internal::kEmptyString) {
    delete variable_;
  }
  if (variable) {
    set_has_variable();
    variable_ = variable;
  } else {
    clear_has_variable();
    variable_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace details

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
